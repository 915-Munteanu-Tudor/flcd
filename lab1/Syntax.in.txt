program = "begin" ";" decllist ";" cmpdstmt end ";"
decllist = declaration | declaration ";" decllist
declaration = "declare as " type ":" IDENTIFIER ";"
type1 = "boolean" | "character" | "int" | “string”
arraydecl = "list" "[" nr "]" "OF" type1
type = type1|arraydecl
cmpdstmt = "{" stmtlist "}"
stmtlist = stmt | stmt ";" stmtlist
stmt = simplstmt | structstmt
simplstmt = assignstmt | iostmt
assignstmt = IDENTIFIER "=" expression ";"
expression = expression ("+" | "-") term | term
term = term ("*" | "/") factor | factor
factor = "(" expression ")" | IDENTIFIER | int | indexidentif | const
indexidentif = IDENTIFIER "[" int "]"
iostmt = "read" | "write" "(" IDENTIFIER ")" ";"
structstmt = cmpdstmt | ifstmt | whilestmt | forstmt
ifstmt = "verify" "(" condition ")" cmpdstmt ["elverify" "(" condition ")" cmpdstmt] ["else" cmpdstmt]
whilestmt = "while" "(" condition ")" cmpdstmt
forstmt = "for" forhead cmpdstmt
forhead = "(" "int" assignstmt ";" condition ";" assignstmt ")"
condition = expression RELATION expression
RELATION = "<" | "<=" | "==" | "!=" | ">=" | ">"